	<<< haystack + whoosh 검색 엔진 구현 >>>
	- 2019-02-13(수)에 개발한 검색엔진
	
	1. 설치 
		CMD 창에서 명령어 입력
		- activate djangoenv
		- (env) pip install django-haystack # pip install django-haystack==2.8.1
		- (env) pip install Whoosh # pip install Whoosh==2.7.4

	2. Settings.py 파일 변경
		2-1. INSTALLED_APPS에 'haystack' 추가
				INSTALLED_APPS = [

					'haystack', # Added.
				]
			
			#Whoosh Search Engine 추가

			WHOOSH_INDEX=os.path.join(BASE_DIR, 'whoosh_index')

			HAYSTACK_CONNECTIONS = {
				'default': {
					'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
					'PATH': WHOOSH_INDEX,
				},
			}
	
	3. models.py 파일에 사용할 model 추가
	
		from django.db import models

		class Book(models.Model):
		bCode = models.IntegerField(primary_key=True)
		bName = models.CharField(max_length=255)
		author = models.CharField(max_length=255)
		publisher = models.CharField(max_length=255)
		publication_year = models.IntegerField()
		classno = models.IntegerField()
		loanCnt = models.IntegerField()
		bImage = models.CharField(max_length=255)


	4. search_indexes.py 파일 생성
		4-1. models.py 파일이 있는 디렉토리에 search_indexes.py 파일을 생성
					
			import datetime
			from haystack import indexes
			from pages.models import Book


			class NoteIndex(indexes.SearchIndex, indexes.Indexable):
				text = indexes.CharField(document=True, use_template=True, template_name='search/book_text.txt')
			   
				bCode = indexes.IntegerField(model_attr='bCode')
				bName = indexes.CharField(model_attr='bName')
				author = indexes.CharField(model_attr='author')
				publisher = indexes.CharField(model_attr='publisher')
				publication_year = indexes.IntegerField(model_attr='publication_year')
				classno = indexes.IntegerField(model_attr='classno')
				loanCnt = indexes.IntegerField(model_attr='loanCnt')
				bImage = indexes.CharField(model_attr='bImage')


				def get_model(self):
					return Book

				def index_queryset(self, using=None):
					"""Used when the entire index for model is updated."""
					return self.get_model().objects.all()
					
					
					
					
	5. Template 파일 생성
		5-1. templates/pages/templates/book_text.txt 파일 생성
		{{ object.bName }}
		{{ object.author }}
		{{ object.publisher }}
		{{ object.publication_year }}
		{{ object.classno }}
		{{ object.bCode }}
		{{ object.loanCnt }}
		{{ object.bImage }}

		
		5-2. templates/pages/templates/search.html 파일 생성
			<h2>Search</h2>

			<form method="get" action=".">
				<table>
					{{ form.as_table }}
					<tr>
						<td>&nbsp;</td>
						<td>
							<input type="submit" value="Search">
						</td>
					</tr>
				</table>

				{% if query %}
					<h3>Results</h3>

					{% for result in page.object_list %}
						{{ result.object.bName }}
						{{ result.object.author }}
						{{ result.object.publisher }}
						{{ result.object.publication_year }}
						{{ result.object.bImage }}
						<br>
					{% empty %}
						<p>No results found.</p>
					{% endfor %}

					{% if page.has_previous or page.has_next %}
						<div>
							{% if page.has_previous %}<a href="?q={{ query }}&amp;page={{ page.previous_page_number }}">{% endif %}&laquo; Previous{% if page.has_previous %}</a>{% endif %}
							|
							{% if page.has_next %}<a href="?q={{ query }}&amp;page={{ page.next_page_number }}">{% endif %}Next &raquo;{% if page.has_next %}</a>{% endif %}
						</div>
					{% endif %}
				{% else %}
					{# Show some example queries to run, maybe query syntax, something else? #}
				{% endif %}
			</form>
			
			
	6. CMS에서 명령어 실행
		python manage.py rebuild_index
		
	
	7. 참고링크
		https://medium.com/@whj2013123218/%EC%9E%A5%EA%B3%A0-django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EA%B2%80%EC%83%89%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-haystack%EA%B3%BC-whoosh%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B8%B0%EC%B4%88-%EA%B2%80%EC%83%89%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84-19aa7f8040db
		https://medium.com/@whj2013123218/%EC%9E%A5%EA%B3%A0-django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EA%B2%80%EC%83%89%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-haystack%EA%B3%BC-whoosh%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC-c349cc7b39d5
		
		
	
	장점 : 설치 및 사용이 간편하다
	단점 : 예) '채식주의자'란 도서를 검색하기 위해서는 무조건 채식주의자 라고 검색해야 함. '채식'이나 '주의자'로 검색시에는 결과가 안 나옴.
	
	
	
		<<< haystack + Elasticsearch 검색 엔진 구현 >>>
	
	1. 설치 
		*** 다음 명령어를 사용하면 안됩니다  : 이렇게 설치하면 elasticsearch 버전이 6.X가 깔리기 때문에 haystack과 연동이 안 됩니다. ***
		pip install django-elasticsearch-dsl
		
		설치되는 목록 : 
		six, 
		python-dateutil, 
		urllib3, 
		elasticsearch, 
		ipaddress, 
		elasticsearch-dsl, 
		django-elasticsearch-dsl
		
		*** 올바른 사용방법 ***
		1.1 git bash를 설치 후, git bash에서 아래 명령어 실행
			git clone https://github.com/django-haystack/django-haystack.git
			
			받은 파일 중 django-haystack/haystack 폴더를 
			C:\Users\Playdata\AppData\Local\Continuum\anaconda3\envs\djangoenv\Lib\site-packages
			로 이동
			
		1.2 elasticsearch engine 설치	
			아래 url 클릭해서 windows 설치후 압축 풀기
			https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.4.tar.gz
			
			내PC 오른쪽 클릭 -> 속성 -> 고급 시스템 설정 -> 환경변수 -> 시스템 변수 Path 클릭 -> 새로만들기 
			elasticsearch-5.6.4 폴더 경로를 추가 
				C:\Users\Playdata\Downloads\elasticsearch-5.6.4\bin
		
			이 후 
			CMD에 elasticsearch 입력
		
			dresses {127.0.0.1:9200}, {[::1]:9200}
			''' started
			가 나와야 함
			
		
		1.2 CMD에서 다음 명령어 실행
			*** 가상환경 CMD 에서 설치하면 권한 문제 때문에 나중에 실행 오류남 ***
			pip install "elasticsearch>=5,<6"
			
		
		
		
	2. Settings.py 파일 변경
		
		INSTALLED_APPS = [
			'django.contrib.admin',
			'django.contrib.auth',
			'django.contrib.contenttypes',
			'django.contrib.sessions',
			'haystack',
			'elasticsearch',
			'django.contrib.messages',
			'django.contrib.staticfiles',
			'pages',
			'users',
		]

		AUTH_USER_MODEL = 'users.Customuser'

		HAYSTACK_CONNECTIONS = {
			'default': {
				'ENGINE': 'haystack.backends.elasticsearch5_backend.Elasticsearch5SearchEngine',
				'URL': 'http://127.0.0.1:9200/',
				'INDEX_NAME': 'haystack',
			},
		}


	3. models.py 파일에 사용할 model 추가
	
		from django.db import models

		class Book(models.Model):
		bCode = models.IntegerField(primary_key=True)
		bName = models.CharField(max_length=255)
		author = models.CharField(max_length=255)
		publisher = models.CharField(max_length=255)
		publication_year = models.IntegerField()
		classno = models.IntegerField()
		loanCnt = models.IntegerField()
		bImage = models.CharField(max_length=255)


	4. search_indexes.py 파일 생성
		4-1. models.py 파일이 있는 디렉토리에 search_indexes.py 파일을 생성
					
			import datetime
			from haystack import indexes
			from pages.models import Book


			class NoteIndex(indexes.SearchIndex, indexes.Indexable):
				text = indexes.CharField(document=True, use_template=True, template_name='search/book_text.txt')
			   
				bCode = indexes.IntegerField(model_attr='bCode')
				bName = indexes.CharField(model_attr='bName')
				author = indexes.CharField(model_attr='author')
				publisher = indexes.CharField(model_attr='publisher')
				publication_year = indexes.IntegerField(model_attr='publication_year')
				classno = indexes.IntegerField(model_attr='classno')
				loanCnt = indexes.IntegerField(model_attr='loanCnt')
				bImage = indexes.CharField(model_attr='bImage')


				def get_model(self):
					return Book

				def index_queryset(self, using=None):
					"""Used when the entire index for model is updated."""
					return self.get_model().objects.all()
					
					
					
					
	5. Template 파일 생성
		5-1. templates/pages/templates/book_text.txt 파일 생성
		{{ object.bName }}
		{{ object.author }}
		{{ object.publisher }}
		{{ object.publication_year }}
		{{ object.classno }}
		{{ object.bCode }}
		{{ object.loanCnt }}
		{{ object.bImage }}

		
		5-2. templates/pages/templates/search.html 파일 생성
			<h2>Search</h2>

			<form method="get" action=".">
				<table>
					{{ form.as_table }}
					<tr>
						<td>&nbsp;</td>
						<td>
							<input type="submit" value="Search">
						</td>
					</tr>
				</table>

				{% if query %}
					<h3>Results</h3>

					{% for result in page.object_list %}
						{{ result.object.bName }}
						{{ result.object.author }}
						{{ result.object.publisher }}
						{{ result.object.publication_year }}
						{{ result.object.bImage }}
						<br>
					{% empty %}
						<p>No results found.</p>
					{% endfor %}

					{% if page.has_previous or page.has_next %}
						<div>
							{% if page.has_previous %}<a href="?q={{ query }}&amp;page={{ page.previous_page_number }}">{% endif %}&laquo; Previous{% if page.has_previous %}</a>{% endif %}
							|
							{% if page.has_next %}<a href="?q={{ query }}&amp;page={{ page.next_page_number }}">{% endif %}Next &raquo;{% if page.has_next %}</a>{% endif %}
						</div>
					{% endif %}
				{% else %}
					{# Show some example queries to run, maybe query syntax, something else? #}
				{% endif %}
			</form>
			
			
	6. CMS에서 명령어 실행
		python manage.py rebuild_index	
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	